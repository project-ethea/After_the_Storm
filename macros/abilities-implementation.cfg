#textdomain wesnoth-After_the_Storm

#
# Implementation of event-based unit abilities.
#

#define ABILITY_PHYSICAL_ENDURANCE_EVENTS
    [event]
        id=ability_physical_endurance_attacker_hits
        name=attacker hits
        first_time_only=no
        [filter_second]
            ability=physical_endurance
        [/filter_second]
        [filter_attack]
            [not]
                type=arcane,cold,fire
            [/not]
        [/filter_attack]

        [fire_event]
            name=physical endurance handler
            [primary_unit]
                x,y=$x2,$y2
            [/primary_unit]
            [secondary_unit]
                x,y=$x1,$y1
            [/secondary_unit]
        [/fire_event]
    [/event]
    [event]
        id=ability_physical_endurance_defender_hits
        name=defender hits
        first_time_only=no
        [filter]
            ability=physical_endurance
        [/filter]
        [filter_second_attack]
            [not]
                type=arcane,cold,fire
            [/not]
        [/filter_second_attack]

        [fire_event]
            name=physical endurance handler
            [primary_unit]
                x,y=$x1,$y1
            [/primary_unit]
            [secondary_unit]
                x,y=$x2,$y2
            [/secondary_unit]
        [/fire_event]
    [/event]
    [event]
        id=ability_physical_endurance_handler
        name=physical endurance handler
        first_time_only=no

        # Primary unit: physical endurance user
        # Secondary unit: attacker/defender

        [if]
            {VARIABLE_NUMERICAL_GREATER_THAN unit.hitpoints 0}
            [then]
                {VARIABLE_OP temp_PHYSICAL_ENDURANCE_restore_hp to_variable damage_inflicted}
                {VARIABLE_OP temp_PHYSICAL_ENDURANCE_restore_hp divide      2}
                {VARIABLE_OP temp_PHYSICAL_ENDURANCE_restore_hp round       ceil}

                [heal_unit]
                    [filter]
                        x,y=$x1,$y1
                    [/filter]
                    amount=$temp_PHYSICAL_ENDURANCE_restore_hp
                    restore_statuses=no
                [/heal_unit]

                [floating_text]
                    x,y=$x1,$y1
                    text="<span color='green'>$heal_amount</span>" # wmllint: ignore
                [/floating_text]

                {CLEAR_VARIABLE temp_PHYSICAL_ENDURANCE_restore_hp}
            [/then]
        [/if]
    [/event]
#enddef

#define ABILITY_ABSCOND_EVENTS
    [event]
        id=ability_abscond_check_attack_1st_unit
        name=attack end
        first_time_only=no
        [filter]
            ability=abscond
        [/filter]
        [filter_condition]
            {VARIABLE_NUMERICAL_LESS_THAN_OR_EQUAL unit.hitpoints 0}
        [/filter_condition]

        [fire_event]
            name=abscond triggered
            [primary_unit]
                x,y=$x1,$y1
            [/primary_unit]
        [/fire_event]
    [/event]

    [event]
        id=ability_abscond_check_attack_2nd_unit
        name=attack end
        first_time_only=no
        [filter_second]
            ability=abscond
        [/filter_second]
        [filter_condition]
            {VARIABLE_NUMERICAL_LESS_THAN_OR_EQUAL second_unit.hitpoints 0}
        [/filter_condition]

        [fire_event]
            name=abscond triggered
            [primary_unit]
                x,y=$x2,$y2
            [/primary_unit]
        [/fire_event]
    [/event]

    [event]
        id=ability_abscond_trigger
        name=abscond triggered
        first_time_only=no
        [filter]
            [not]
                status=absconding
            [/not]
        [/filter]

        {LOG_ATS_DBG "$unit.id ($x1, $y1) absconding!"}

        [set_variables]
            name=unit
            mode=merge
            [value]
                hitpoints="$(min(8, $unit.max_hitpoints))"
                attacks_left=0
                moves="$(max(1, $unit.max_moves - 2))"
                [status]
                    absconding=yes
                [/status]
            [/value]
        [/set_variables]

        [unstore_unit]
            variable=unit
            find_vacant=no
        [/unstore_unit]

        [event]
            name="side $unit.side turn $(2 + $turn_number)"
            delayed_variable_substitution=no

            [store_unit]
                [filter]
                    id=$unit.id
                [/filter]
                variable=abscondee
                kill=no
            [/store_unit]

            {CLEAR_VARIABLE abscondee.status.absconding}

            [unstore_unit]
                variable=abscondee
                find_vacant=no
            [/unstore_unit]

            {CLEAR_VARIABLE abscondee}
        [/event]
    [/event]

    [event]
        id=ability_abscond_cleanup
        name=victory

        [store_unit]
            [filter]
                status=absconding
            [/filter]
            variable=victory_abscondees
            kill=no
        [/store_unit]

        [foreach]
            array=victory_abscondees
            variable=abscondee

            [do]
                {CLEAR_VARIABLE abscondee.status.absconding}

                [unstore_unit]
                    variable=abscondee
                    find_vacant=no
                [/unstore_unit]
            [/do]
        [/foreach]

        {CLEAR_VARIABLE victory_abscondees}
    [/event]
#enddef

#
# Macro used to implement ABILITY_DEMOLITION_AUXILIARY_EVENT
# and some scenario-specific events.
#
# NOTE: if _ADDITIONAL_LOCATION_FILTER contains terrain=, it must be under an
# [and], [or], or [not] block; otherwise, it will cause problems.
#
#define ABILITY_DEMOLITION_AUXILIARY_EVENT_DESTRUCTION_IMPLEMENTATION _X _Y
#arg HANDLE_AS_UNIT_ATTACK
    yes
#endarg
    # Dummy SLF that never matches anything, so that [not] EXCLUDE_SLF [/not]
    # if EXCLUDE_SLF is unspecified doesn't result in excluding the whole map.
#arg EXCLUDE_SLF
    terrain=&&&&
#endarg

    {VARIABLE temp_DEMO_source_is_unit {HANDLE_AS_UNIT_ATTACK}}

    [color_adjust]
        red,green,blue=300,300,300
    [/color_adjust]

    [set_variables]
        name=temp_DEMO_terraform_actions
        mode=replace
        [value]
            [remove_terrain_overlays]
                x={_X}
                y={_Y}
                radius=1

                [not]
                    {EXCLUDE_SLF}
                [/not]

                [filter_radius]
                    [not]
                        terrain=X*,*^X*,Q*,*^Q*,W*,*^W*,S*,*^S*
                    [/not]
                    [not]
                        {EXCLUDE_SLF}
                    [/not]
                [/filter_radius]
            [/remove_terrain_overlays]

            [terrain]
                x={_X}
                y={_Y}
                radius=1
                [and]
                    # Only these terrains can get flattened. The others only
                    # have their overlays removed above.
                    terrain=A*,C*,D*,G*,K*,R*,U*,Y*
                [/and]

                [not]
                    {EXCLUDE_SLF}
                [/not]

                [filter_radius]
                    [not]
                        terrain=X*,*^X*,Q*,*^Q*,W*,*^W*,S*,*^S*
                    [/not]
                    [not]
                        {EXCLUDE_SLF}
                    [/not]
                [/filter_radius]

                terrain=Re^Es
            [/terrain]
        [/value]
    [/set_variables]

    # Execute terraforming commands
    [insert_tag]
        name=command
        variable=temp_DEMO_terraform_actions
    [/insert_tag]

    [harm_unit]
        [filter]
            [filter_location]
                [filter_adjacent_location]
                    x={_X}
                    y={_Y}
                [/filter_adjacent_location]
            [/filter_location]
        [/filter]

        # No harm source unit or weapon given here, on purpose.

        delay=0
        amount=$this_unit.hitpoints
        # No animations played at this point, since they'd delay the sequence too much
        # in the worst case (six adjacent units)
        animate=no
        kill=no
        fire_event=yes
    [/harm_unit]

    {QUAKE "explosion-big.ogg"}

    [redraw][/redraw] # update terrain display

    [color_adjust]
        red,green,blue=0,0,0
    [/color_adjust]

    # Kill all adjacent units that don't have the demolition ability first;
    # we need to take care of those in a separate step to prevent causing
    # an event loop.

    [set_variables]
        name=temp_DEMO_action
        mode=replace
        [value]
            [filter_location]
                [filter_adjacent_location]
                    x={_X}
                    y={_Y}
                [/filter_adjacent_location]
            [/filter_location]
            [not]
                ability=demolition
            [/not]
            [not]
                status=immune_to_demolition
            [/not]
            [not]
                # Shapeshifters are handled by scenario-specific
                # events where they appear, and it might not be
                # a good idea for those to fire at this point.
                [filter_wml]
                    [variables]
                        is_shapeshifter=yes
                    [/variables]
                [/filter_wml]
            [/not]
            [secondary_unit]
                # the demolition unit killed them
                x={_X}
                y={_Y}
            [/secondary_unit]
            animate=yes
            fire_event=yes
        [/value]
    [/set_variables]

    [if]
        {VARIABLE_BOOLEAN_EQUALS temp_DEMO_source_is_unit no}
        [then]
            # Our event wasn't dispatched by a unit attack sequence (hopefully)
            # so we need to fire_event on the source tile kill.
            [set_variables]
                name=temp_DEMO_action.filter_location
                mode=merge
                [value]
                    [or]
                        x={_X}
                        y={_Y}
                    [/or]
                [/value]
            [/set_variables]

            # Avoid triggering a warning about not matching any units in
            # [secondary_unit] on Wesnoth 1.14.
            {CLEAR_VARIABLE temp_DEMO_action.secondary_unit}
        [/then]
    [/if]

    [insert_tag]
        name=kill
        variable=temp_DEMO_action
    [/insert_tag]

    {CLEAR_VARIABLE temp_DEMO_action,temp_DEMO_source_is_unit,temp_DEMO_terraform_actions}

    # Remove this source unit so the target units with demolition don't
    # trigger its death again.

    [kill]
        x={_X}
        y={_Y}
        animate=no
        fire_event=no
    [/kill]

    # Take care of any remaining adjacent units with demolition.

    [kill]
        [filter_location] # SLF, since there's no unit at (_X, _Y) anymore.
            [filter_adjacent_location]
                x={_X}
                y={_Y}
            [/filter_adjacent_location]
        [/filter_location]
        ability=demolition
        # No secondary unit, but we shouldn't need one in this case.
        animate=yes
        fire_event=yes
    [/kill]
#enddef

#define ABILITY_DEMOLITION_EVENTS
    [event]
        id=ability_demolition_die
        name=die
        first_time_only=no
        [filter]
            ability=demolition
        [/filter]

        # Work around Wesnoth 1.14+ rendering the unit visible again because it
        # gets referenced in the event.
        [hide_unit]
            x,y=$x1,$y1
        [/hide_unit]

        {ABILITY_DEMOLITION_AUXILIARY_EVENT_DESTRUCTION_IMPLEMENTATION $x1 $y1}

        [fire_event]
            name=demolition complete
        [/fire_event]
    [/event]
#enddef

#
# Base ability implementation for all aspect Guardians.
#

# Some scenario events can interact with this ability in unexpected ways
# resulting in "failed to auto-store $unit/$second_unit" errors -- most notably
# this caused issues in scenario E3S10 when killing the last Blood Core (see
# <https://github.com/project-ethea/After_the_Storm/issues/75>. This check is
# here to ensure that either the stores are viable or the event handlers that
# rely on them being so are not executed.
#define ABILITY_ASPECT_GUARDIAN_BASE:UNIT_PAIR_EXISTS_PRECONDITION
    [filter_condition]
        {VARIABLE_NUMERICAL_GREATER_THAN unit.length        0}
        {VARIABLE_NUMERICAL_GREATER_THAN second_unit.length 0}
    [/filter_condition]
#enddef

# wmllint: unbalanced-on
#define ABILITY_ASPECT_GUARDIAN_BASE
    #
    # Regeneration
    #
    [regenerate]
        value=8
        id=aspect_guardian_regenerates
        affect_self=yes
        poison=cured
    [/regenerate]

    #
    # Immortality
    #
    [dummy]
        id=aspect_guardian_immortality
    [/dummy]

    # wmlxgettext: [abilities]
[/abilities]

[event]
    id=aspect_guardian_immortality_implementation
    name=last breath
    first_time_only=no
    [filter]
        ability=aspect_guardian_immortality
    [/filter]
    [filter_second]
        [not]
            ability=aspect_guardian_immortality
        [/not]
        [not]
            ability=aspect_destroyer
        [/not]
    [/filter_second]

    {VARIABLE unit.hitpoints 1}

    # Deduct the killing XP from the attacker, otherwise it is possible
    # for them to advance very quickly from L1 to their maximum advancement.
    # Things get even messier once the full health AMLA effect kicks in.

    {LOG_ATS_DBG "aspect_guardian_immortality_implementation: triggered, deducting $(max([4, 8 * $unit.level])) XP from $second_unit.id"}

    {VARIABLE_MIN second_unit.experience "$(max([4, 8 * $unit.level]))"}

    [unstore_unit]
        variable=unit
        find_vacant=no
    [/unstore_unit]

    [unstore_unit]
        variable=second_unit
        find_vacant=no
    [/unstore_unit]
[/event]

[event]
    id=aspect_guardian_no_combat_experience_on_attack_implementation
    name=attack end
    first_time_only=no
    [filter_second]
        ability=aspect_guardian_immortality
    [/filter_second]

    {ABILITY_ASPECT_GUARDIAN_BASE:UNIT_PAIR_EXISTS_PRECONDITION}

    [if]
        # Let the last breath event handle things if the target is dying.
        {VARIABLE_NUMERICAL_GREATER_THAN second_unit.hitpoints 0}
        [then]
            {LOG_ATS_DBG "aspect_guardian_no_combat_experience_on_attack_implementation: triggered, deducting $second_unit.level XP from $unit.id"}

            # Deduct the combat XP from the attacker.
            {VARIABLE_MIN unit.experience "$second_unit.level"}

            [unstore_unit]
                variable=unit
                find_vacant=no
            [/unstore_unit]
        [/then]
    [/if]
[/event]

[event]
    id=aspect_guardian_no_combat_experience_on_defense_implementation
    name=attack end
    first_time_only=no
    [filter]
        ability=aspect_guardian_immortality
    [/filter]

    {ABILITY_ASPECT_GUARDIAN_BASE:UNIT_PAIR_EXISTS_PRECONDITION}

    [if]
        # Let the last breath event handle things if the target is dying.
        {VARIABLE_NUMERICAL_GREATER_THAN unit.hitpoints 0}
        [then]
            {LOG_ATS_DBG "aspect_guardian_no_combat_experience_on_defense_implementation: triggered, deducting $unit.level XP from $second_unit.id"}

            # Deduct the combat XP from the attacker.
            {VARIABLE_MIN second_unit.experience "$unit.level"}

            [unstore_unit]
                variable=second_unit
                find_vacant=no
            [/unstore_unit]
        [/then]
    [/if]
[/event]

[+abilities]
    # wmlxgettext: [/abilities]
#enddef
# wmllint: unbalanced-off

#
# UtBS ability events
#

#define ABILITY_DISENGAGE_EVENTS
    [event]
        name=attack end
        first_time_only=no

        [filter]
            ability=disengage

            [not]
                [filter_wml]
                    moves=$this_unit.max_moves
                [/filter_wml]
            [/not]
        [/filter]

        {VARIABLE unit.moves 0}

        [unstore_unit]
            variable=unit
            find_vacant=no
        [/unstore_unit]
    [/event]
#enddef

